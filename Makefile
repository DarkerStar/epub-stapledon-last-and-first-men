################################################################################
# Makefile for generating EPUB 3.0 e-books from content sources.               #
# Copyright (C) 2013-2015  Mark A. Gibbs                                       #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.        #
#                                                                              #
################################################################################

################################################################################
# Quick guide:                                                                 #
#                                                                              #
# Create a file named "book.mk" (without the quotes) in the same directory as  #
# this makefile, and fill in the required settings (and any optional settings  #
# you like).                                                                   #
#                                                                              #
# Then the command "make" will build your book (and cover thumbnails, if you   #
# have set those options), the command "make clean" will erase anything        #
# generated by "make", and "make check" will run your book through epubcheck   #
# (if you have set up the correct options in "book.mk").                       #
#                                                                              #
# For more options and information check the README at:                        #
#   https://github.com/DarkerStar/epub-build-makefile                          #
#                                                                              #
################################################################################

# Variable defaults (will probably be overridden) ##############################
builddir := build

epubcheck := $(if $(strip $(EPUBCHECK_JAR)),$(EPUBCHECK_JAR),epubcheck-3.0.1)

# Set up commands to be used ###################################################
cmd_zip_create = rm -f -- $(1)
cmd_zip_store  = zip -X $(1) $(2)
cmd_zip_add    = zip -rgD $(1) $(2)

define cmd_pngcrush =
	pngcrush -rem alla -q $(1) $(1)~
	rm -f -- $(1) && mv $(1)~ $(1)
endef

define cmd_svg_to_png =
	inkscape $(1) --export-png=$(2)
	mogrify -background white -alpha remove -alpha off $(2)
	$(call cmd_pngcrush,$(2))
endef

cmd_epubcheck = java -jar $(epubcheck) $(1)

strip_duplicates = $(if $1,$(firstword $1) $(call strip_duplicates,$(filter-out $(firstword $1),$1)))

# Get the configuration settings for the book ##################################
include book.mk

# Important settings for the makefile ##########################################
# Recommended by the manual
SHELL := /bin/sh

# Handy variables for formatting
empty :=
tab   := $(empty)	$(empty)

# Make sure all directories are legit
srcdir := $(strip $(if $(strip $(srcdir)), $(srcdir), .))
outdir := $(strip $(if $(strip $(outdir)), $(outdir), .))
builddir := $(strip $(if $(strip $(builddir)), $(builddir), .))

ifeq ($(srcdir),$(outdir))
  $(error srcdir and outdir cannot be the same.)
endif

ifeq ($(srcdir),$(builddir))
  $(error srcdir and builddir cannot be the same.)
endif

ifeq ($(outdir),$(builddir))
  $(error outdir and builddir cannot be the same.)
endif

metafilesdir := $(srcdir)$(strip $(if $(strip $(metafilesdir)),/$(metafilesdir)))

# The actual EPUB file being created
epub := $(outdir)/$(book).epub

epub_metafiles := $(call strip_duplicates,container.xml $(metafiles))

epub_metafiles_container_src := $(filter container.xml,$(metafiles))
epub_metafiles_container_src := $(if $(epub_metafiles_container_src),$(metafilesdir)/$(epub_metafiles_container_src))

epub_content := $(opf) $(content)

# The main make rule ###########################################################
# This makes the book, and - if desired - the cover image and thumbnails.
all : $(epub)

# The book make rule ###########################################################
$(epub) : $(builddir)/mimetype $(addprefix $(builddir)/META-INF/,$(epub_metafiles)) $(addprefix $(builddir)/OEBPS/,$(epub_content))
	@cd $(builddir) && $(call cmd_zip_create,$(book).epub)
	@cd $(builddir) && $(call cmd_zip_store,$(book).epub,mimetype)
	@cd $(builddir) && for f in $(addprefix META-INF/,$(epub_metafiles)) ; \
	do \
	  $(call cmd_zip_store,$(book).epub,$$f) ; \
	done
	@cd $(builddir) && for f in $(addprefix OEBPS/,$(epub_content)) ; \
	do \
	  $(call cmd_zip_store,$(book).epub,$$f) ; \
	done
	@mv -t $(outdir) $(builddir)/$(book).epub

# Copying content documents ####################################################
$(builddir)/OEBPS/% : $(srcdir)/%
	mkdir -p $(dir $@) && cp $< $@

# Generate mimetype file #######################################################
$(builddir)/mimetype : | $(builddir)
	-@echo "Generating mimetype... "
	@printf "application/epub+zip" >$@

# Generate META-INF/container.xml file #########################################
define generate_meta_inf_container =
	-@echo "Generating META-INF/container.xml... "
	$(file >$@,<?xml version="1.0"?>)
	$(file >>$@,<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">)
	$(file >>$@,$(tab)<rootfiles>)
	$(foreach o,$(opf),$(file >>$@,$(tab)$(tab)<rootfile full-path="OEBPS/$(o)" media-type="application/oebps-package+xml"/>))
	$(file >>$@,$(tab)</rootfiles>)
	$(file >>$@,</container>)
endef

$(builddir)/META-INF/container.xml : $(epub_metafiles_container_src) | $(builddir)/META-INF
	$(if $(epub_metafiles_container_src),cp -f $< $@,$(call generate_meta_inf_container))

# Creating raster images from SVG ##############################################
$(builddir)/OEBPS/%.png : $(builddir)/OEBPS/%.svg
	$(call cmd_svg_to_png,$<,$@)

# Creating directories #########################################################
$(builddir)/OEBPS : | $(builddir)
	-@echo "Creating OEBPS... "
	@cd $(builddir) && mkdir OEBPS

$(builddir)/META-INF : | $(builddir)
	-@echo "Creating META-INF... "
	@cd $(builddir) && mkdir META-INF

$(builddir) :
	@mkdir $(builddir)

# Check target #################################################################
check : $(epub)
	$(call cmd_epubcheck,$(epub))

# Clean target #################################################################
clean :
	-@rm -rf -- $(epub) $(builddir)

.PHONY : all check clean
